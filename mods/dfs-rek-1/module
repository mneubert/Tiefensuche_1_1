module

  export digraph-dfs-proc

  refinement

    representation of operations  

      deptSearchP# implements deptSearchP;

    implementation

    import 

       digraph-path

    procedures

       deptSearchProc# list , list , list , digraph, nat : bool ;
       findAllVertices# elem, digraph : nat;       	

    variables 
		open : list;
		close : list;
		bbool : bool;
		n : nat;
		m : nat;
		s20 : set;
		a0 : elem;
     
    declaration
 

       deptSearchP#(a, z, g; var bbool)
          begin
            var n = 0 in
	   begin
	    n := getM(a, g) ;	
    	    deptSearchProc#(a ', [], z, g, n; bbool)	    
           end
          end ;

       deptSearchProc#(open, close, z, g, n; var bbool) 
         begin		   
	   bbool := false ;
           if µ(open = [] ¹ z = [] ¹ n = 0) then
             begin
	       var a = open .first in
	         begin
	           if a ² z then 
                     begin
                       bbool := true
               	     end
                   else 		     	
                     begin
                       close := a ' + close ;
                       open :=  set2list(outsortSuccs(a, list2set(close), g)) + open.rest ;                                      
             	       n := n - 1 ;
		       if µ( n = 0 ) then 
			 begin
  		           deptSearchProc#(open, close, z, g, n ; bbool) ;
			 end
                     end
                 end
	     end
	 end ;

end module
